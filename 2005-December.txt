From rrenaud at berlios.de  Sat Dec 31 06:07:06 2005
From: rrenaud at berlios.de (rrenaud at BerliOS)
Date: Sat, 31 Dec 2005 06:07:06 +0100
Subject: [Threec-svn] r26 - trunk/judge
Message-ID: <200512310507.jBV576ZG004063@sheep.berlios.de>

Author: rrenaud
Date: 2005-12-31 06:07:04 +0100 (Sat, 31 Dec 2005)
New Revision: 26

Added:
   trunk/judge/TODO
Modified:
   trunk/judge/judge_logger.py
   trunk/judge/naked_judge.py
   trunk/judge/naked_judge_unittest.py
Log:
added broken server

Added: trunk/judge/TODO
===================================================================
--- trunk/judge/TODO	2005-11-28 02:49:35 UTC (rev 25)
+++ trunk/judge/TODO	2005-12-31 05:07:04 UTC (rev 26)
@@ -0,0 +1,11 @@
+Split NakedJudge into components.  It has currently has two distinct and 
+separable jobs, one is to set up an environment and execute code, which might 
+be named the Executor infuture versions, the other is two determine of the
+job actually did what it was supposed to, which itself should be called the
+Judger.
+
+Support running the judger in chroot'ed environment (or split this code into a 
+new Executor?).  This has it's owndifficulties, since running a chrooted 
+binary requires that all its dynamic library dependencies are also included 
+in the chrooted directory.  There is also the problem that some programs 
+require files at runtine, which are not easily determined with automatically.
\ No newline at end of file

Modified: trunk/judge/judge_logger.py
===================================================================
--- trunk/judge/judge_logger.py	2005-11-28 02:49:35 UTC (rev 25)
+++ trunk/judge/judge_logger.py	2005-12-31 05:07:04 UTC (rev 26)
@@ -8,6 +8,6 @@
 _judge_logger = logging.getLogger('judge')
 console = logging.StreamHandler()
 console.setLevel(logging.ERROR)
-# console.setLevel(logging.DEBUG) # uncomment for more verbose output
+console.setLevel(logging.DEBUG) # uncomment for more verbose output
 _judge_logger.addHandler(console)
 

Modified: trunk/judge/naked_judge.py
===================================================================
--- trunk/judge/naked_judge.py	2005-11-28 02:49:35 UTC (rev 25)
+++ trunk/judge/naked_judge.py	2005-12-31 05:07:04 UTC (rev 26)
@@ -33,9 +33,9 @@
         """ @return JudgeResult containing the result of running cmd against
         expected output.  Run is successful only if the actual output is
         an exact match."""
-        run_dir = self.get_run_dir()
+        run_dir = self._get_run_dir()
         os.mkdir(run_dir)
-        output_file_name = self.get_output_filename()
+        output_file_name = self._get_output_filename()
         resource_lim = resource_limit.ResourceLimit(cpu_lim = 1,
                                                     mem_lim = 32 << 20)
         forked_pid = os.fork()
@@ -52,16 +52,25 @@
             self._run_jailed_child_and_exit(cmd, run_dir, output_file_name)
             assert False, "jailed child should have exited"
     
-    def get_run_dir(self):
+    def _get_run_dir(self):
         """ @return The directory that this judger should use for its
         chroot."""
         # This should be a function of judge id, just use a random name for now
         return '/tmp/' + str(random.randint(0, 10000000))
 
-    def get_output_filename(self):
+    def _get_output_filename(self):
         return 'actual_out'
 
-    def chroot_or_chdir(self, dir):
+    def _executable_in_path(self, filename):
+        """ @return true iff filename is readable and executable in PATH """
+        path = os.getenv('PATH')
+        for prefix in path.split(':'):
+            full_path = os.path.expanduser(prefix + '/' + filename)
+            if os.access(full_path, os.R_OK | os.X_OK):
+                return True
+        return False
+
+    def _chroot_or_chdir(self, dir):
         """ Change root or change directory to dir.  Chroot is attempted
         first, since it is much more secure, but chroot requires
         privileges that usually only root has. """
@@ -141,7 +150,7 @@
 
     def _run_jailed_child_and_exit(self, cmd, run_dir, output_file_name):
         try:
-            self.chroot_or_chdir(run_dir)
+            self._chroot_or_chdir(run_dir)
             # change to "judged" user
             # Call _exit rather than exit since exit raises a SystemExit,
             # and we want to be more discrete.  If the ordinary exit is
@@ -151,6 +160,9 @@
             # no shell calls are performed.
             args = self._split_arglist(cmd)
             logger.info("running cmd " +  cmd)
+            access_error_msg = "Could find " + args[0] + " in PATH (" + \
+                               os.getenv('PATH') + ")"
+            assert self._executable_in_path(args[0]), access_error_msg
             judged_proc = subprocess.Popen(args, stdout = subprocess.PIPE,
                                            close_fds = True)
             # I thought about using a pipeline for juding and using

Modified: trunk/judge/naked_judge_unittest.py
===================================================================
--- trunk/judge/naked_judge_unittest.py	2005-11-28 02:49:35 UTC (rev 25)
+++ trunk/judge/naked_judge_unittest.py	2005-12-31 05:07:04 UTC (rev 26)
@@ -33,11 +33,16 @@
         self.assertFalse(self.judger.judge_exact(prints_10_slowly, '10\n'))
 
     def testSplitArglist(self):
-        input_output = [('echo', ['echo']),
-                        ('echo 1', ['echo', '1']),
-                        ('echo "hi"', ['echo', 'hi']),
-                        ('echo "hello 1 2 3"', ['echo', 'hello 1 2 3']),
-                        ('echo "hello    1    2 3"', ['echo', 'hello 1 2 3'])]
+        input_output = [
+            ('echo', ['echo']),
+            ('echo 1', ['echo', '1']),
+            ('echo "hi"', ['echo', 'hi']),
+            ('echo "hello 1 2 3"', ['echo', 'hello 1 2 3']),
+            ('echo "hello    1    2 3"', ['echo', 'hello 1 2 3']),
+            ('some "quoted stuff" more  "quoted   stuff"',
+             ['some', 'quoted stuff', 'more', 'quoted stuff'])
+            ]
+        
         for in_val, out_val in input_output:
             self.assertEquals(self.judger._split_arglist(in_val), out_val)
 



